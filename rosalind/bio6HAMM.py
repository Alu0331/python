a = "GCGTAAGGCGAAACCTACAATCCTAGACCTAGGTCGTCGGACCCCCATTAGAAGGGACGTTGGACATGCTGATGTTAGCGTGGCGTAAGGGCGCTGACCATACGCGGGAACCTATTGACTTCCGGTGTAAAAACAGTGCCGGCTAACATGACTGTCAGACTTGCTCTCCCGATTGGAGAAGTTCGCTGTGACGGACCCATACTGCGAGCCACTCGGCCCGCTTAGTTCGTCCCTCCCGTTCTCGTACACTTCTGGGTGGTCAAATTTTAGCTTCCCTGATCATCAAACATTAATCCTTTCCGCAGCTGACCAACCGGAACATAAACCGTTTCCACTATCGAGTCCAGTGGACATTGGTACCATAGCCATCACCTTCTGATACTTTGGGGCCGGGGTGACCAACTTCCTCAGACAATACTAAGCGGGTCCCGTATGGTGCGATTCGCAGGCTCAACGTTCAAGTGAACATGTTGTGGTATATCAATGCGGGTTACCTTAACAGCCAGTCCCAAGCCTTAGATCGAACGAGGGCTTTTAACGAACTTCCGGAGAGGTACATAATGTCGCCGCGAGGACCCACATAAAAATCTTGACCTCCGTTGGTAACAACTGCACTTAGCGTGCGCGACACCCATGACTTCCAATGGAGGGCACGGTGTGTCTGCATCTCGCCATTAGGTCGGGCTGTACAGTGTTTATAAGATGATTATACTAATCATGCTGATCTTAGGGTACCTCGACTGCCCCCGCGGGTCTTCCGGGTGCTGCTTTGCTACCTGCGACAGCGATTTAAGATCCCCACGTGGGAAATTGTTGCGCGCATCCCGAGGACATCCTACTACAGAGTAAACTCAAAAGCCCATTAATAGCCCCTTGGCAGGAGGGCTGCCAAGTCACTTGGCACCAAAGTTCTCTCGATGCTGTTATGCAGTCGATCAGGATTGGCCCGATTAGGGCCGGGACACAGAAAAATGCCTAGTGGCTTACCACGCGCCTACA"
b = "CCGGTTGGAGAGGTCAATAATTCATGGGCCAGCTACACGATGTACTTAGACAAGCAAGGACGGCCATCAAGTTCATAGTGCTGCGTAGGGTCCCCGACTATTACAGGCCAAAAATCCAATTCATGAGGTTACTTTCTGAATGATACCATACGGGTCAAGGAGCGTCAGGTGTTTTGTGACATATGGTCCAACGGGACCCTAACTCGAGCGGCACGCCACCCATAGATCCACACGACCGTTCTGTAATTCATATAAGTCGTAAATTGTTAGCATTCCGGATTAGTTTCCATGACTCCGCTGGGAAGTGCTCGAACCAGAAACTTATCCACTTGCACAAAGAACTCCAGAGGACTGTGTTATAGCGTGTCTCCGCTCAATGTATTGTGGCGCCAGGGCTAACCACTATCAATGATAATACTTGCATTCCGAATCATACTGCGATATCTAGCCGTAACATTCAGGTCAACATGTTAGGAAATAAGAACGCTCGGTGCCTTTCCACACACTCGGAATCCTTTGCCCGACCTAATGATGGTAACGATCTTCTGGGGAGGTATAGTATAATTGCGCGAGGACCCACGTAAGCTTCCAAGGGTCTGGATAGGAAAGCTGAAGCTAGGGTGTTCGGCACACTAGCCTCGCGTTGCCGGGCACGCAGTGCCGGCAATGAGACATGAAGTTTCGCTGTCTAGTGATAAACCGACCATTATACTAGCGATGCCTATCCTGGGAATCCCTCCCAACCCAGGTAACGCGCTGGACAGTAGATAGGTTCCATAGAAATGCTTTTCATCAGTCGCGGAATTGTACAGTAGCGAAACGTGCAGCAAATTGACTATTTCCTGGGCAGCTAGACGGCCCCGTAATATCCTGTTTGCGCTGCGCCTACATACTCACTCCATACCAAGTTCCACCCGAAGCTGTTTTGCAATGGCACCCCGATGGCCACACACTTGGGTGGCCAATCAACAAGACTTACTGACTTGCTGTGCGTCTATA"
m = []
count= 0
# def hammingFunc(a,b):
#     if len(a) == len(b):
#         for p in range(0,len(a)):
#             if a[p] != b[p]:
#                 m.append(p)
#                 print(m)
#     return len(m)
def hammingFunc(a,b):
    global count
    for ele in range(0, len(a)):
        if a[ele] != b[ele]:
            count += 1
    return count

print(hammingFunc(a,b))




